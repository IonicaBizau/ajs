<html>
  <head>
    <title><%= 'Hello World' %></title>
  </head>
  <body>
  
    <!-- AJS is a superset of javascript, so things like 
         variable assignment just work as expected -->
  
    <% var async2 = function() { %>
    <div><%= 'async 2 done' %></div>
    <% } %>
  
    <% if(10 == (5 + 5)) { %>
    <h1>Hello world.</h1>
    <% } %>

    <% for(i=1; i<5; i++) { %>
      <%= "next: " + i  + "<br/>" %>
    <% } %>

    <!-- callbacks are flushed to the proper location in the template
         when they return, but they can't be nested -->
    
    <p>
      <% setTimeout(function() { %>
      <%= 'async 1 done' %>
      <% }, 10 ) %>
    </p>
  
    <!-- native array callback functions are exempt from the
         nested callback restriction. -->
    
     <ul>
       <% ['one', 'two', 'three'].forEach(function(item) { %>
         <% ['nested'].forEach(function(item2) { %>
         <li><%= item %></li>
         <% include('partials/item', {item: item2}) %>
         <% }); %>
       <% }); %>
     </ul>
  
    <!-- named callback functions work too.
         a callback's output is inserted into the template at the 
         spot where it was passed to its async function -->
  
    <p> <% setTimeout(async2, 100) %> </p>

    <!-- callbacks can be used multiple times -->
  
    <% setTimeout(async2, 100) %>
  
    <!-- other AJS partials can be embedded using the "include" function -->
  
    <% include('partials/message', {text: "Hello world!"}) %>
  
    <p><%= 'any statement can be printed - ' + (6 + 6) %></p>
  </body>
</html>