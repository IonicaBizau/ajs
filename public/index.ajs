<html>
  <head>
  </head>
  <body>
  
    <!-- AJS is a strict superset of javascript, so require 
         and variable assignment work as expected -->
  
    <% var _ = require('underscore')
     , async2 = function() { %>
    <div><%= 'async 2 done' %></div>
    <% } %>
  
    <% if(false) { %>
    <h1>Hidden.</h1>
    <% } %>

    <% if(true) { %>
    <h1>Hello world.</h1>
    <% } %>

    <% for(i=1; i<5; i++) { %>
      <%= "next: " + i  + "<br/>" %>
    <% } %>

    <!-- callbacks are flushed to the proper location in the template
         when they return, but they can't be nested -->
    
    <p>
      <% setTimeout(function() { %>
      <%= 'async 1 done' %>
      <% }, 500 ) %>
    </p>
  
    <!-- underscore.js functions are exempt from the
         nested callback restriction. -->
    
    <ul>
      <% _.each(['one', 'two', 'three'], function(item) { %>
        <% _.each(['nested'], function(item2) { %>
        <li><%= item %></li>
        <li><%= item2 %></li>
        <% }); %>
      <% }); %>
    </ul>
  
    <!-- named callback functions work too.
         a callback's output is inserted into the template at the 
         spot where it was passed to it's async function -->
  
    <p>
      <% setTimeout(async2, 1000) %>
    </p>

    <!-- callbacks can be used multiple times -->
  
    <% setTimeout(async2, 1000) %>
  
    <!-- other AJS partials can be embedded using the "include" function -->
  
    <% include('includes/partial') %>
  
    <p><%= 'any statement can be written - ' + (6 + 6) %></p>
  </body>
</html>
